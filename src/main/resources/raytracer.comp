#version 450

#define MAX_COUNT 100
#define MAX_TRIANGLES 1000

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;

struct Material {
    vec3 albedo;
    vec3 emissionColor;
    float emissionStrength;
    int type;  // 0 = diffuse, 1 = metal, 2 = glass
    float fuzz;  // for metal
};

layout(std430, binding = 0) buffer MaterialsBuffer {
    Material materials[MAX_COUNT];
};

struct Object {
    vec3 triangles[MAX_TRIANGLES];
    ivec3 indices[MAX_TRIANGLES];
    int triangles_count;
    int indices_count;
    int material_id;
};

layout(std430, binding = 1) buffer ObjectsBuffer {
    Object objects[MAX_COUNT];
};

uniform int num_objects;
uniform int num_materials;
uniform int frame_counter;

struct HitRecord {
    vec3 p;
    vec3 normal;
    float t;
    int material_id;
    bool front_face;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Camera {
    vec3 origin;
    vec3 look_at;
    vec3 up;
    float fov;
    float focus_dist;
    float defocus_angle;
    vec3 defocus_disk_u, defocus_disk_v;

    vec3 pixel00_loc;
    vec3 pixel_delta_u, pixel_delta_v;
};

uniform float rand0to1;
uint rand_seed = gl_GlobalInvocationID.x + imageSize(screen).x * (gl_GlobalInvocationID.y + imageSize(screen).y * frame_counter);


float length_squared(vec3 v) {
    return dot(v, v);
}

// Credit for the hash, float_construct, and random(float x) functions: https://stackoverflow.com/a/17479300/18758660
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

uint rand_construct(uint m) {
    m = m * 747796405 + 2891336453;
    uint result = ((m >> ((m >> 28) + 4)) ^ m) * 277803737;
    return (result >> 22) ^ result;
}

float random(uint x) {
    return rand_construct(hash(x));
}

uint rand_uint() {
    rand_seed = rand_construct(rand_seed);
    return rand_seed;
}

float random() {
    return rand_uint() / 4294967295.0;
}

vec3 random_vec3() {
    return vec3(random(), random(), random());
}

vec3 random_unit_disk() {
    while (true) {
        vec3 p = vec3(random() * 2 - 1, random() * 2 - 1, 0);
        if (length_squared(p) < 1) {
            return p;
        }
    }
}

vec3 random_square() {
    return vec3(random() - 0.5, random() - 0.5, 0);
}


vec3 random_unit_vec() {
    while (true) {
        vec3 p = 2.0 * vec3(random(), random(), random()) - vec3(1, 1, 1);
        float len_squared = length_squared(p);
        if (0.0001 < len_squared && len_squared < 1.0) {
            return normalize(p);
        }
    }
}

void set_face_normal(Ray r, vec3 outward_normal, inout HitRecord rec) {
    rec.front_face = dot(r.direction, outward_normal) < 0;
    rec.normal = rec.front_face ? outward_normal : -outward_normal;
}

Camera camera_init() {
    ivec2 dimensions = imageSize(screen);

    Camera cam;
    cam.origin = vec3(0, 0, 2);
    cam.look_at = vec3(0, 0, -1);
    cam.up = vec3(0, 1, 0);
    cam.fov = radians(36);
    cam.focus_dist = 3;
    cam.defocus_angle = 0;

    float h = tan(cam.fov / 2);
    float viewport_height = 2 * h * cam.focus_dist;
    float viewport_width = viewport_height * dimensions.x / dimensions.y;

    vec3 w = normalize(cam.origin - cam.look_at);
    vec3 u = normalize(cross(cam.up, w));
    vec3 v = cross(w, u);

    vec3 viewport_u = viewport_width * u;
    vec3 viewport_v = viewport_height * -v;

    cam.pixel_delta_u = viewport_u / dimensions.x;
    cam.pixel_delta_v = viewport_v / dimensions.y;

    // might be + 0.5 * viewport_v
    vec3 viewport_upper_left = cam.origin - cam.focus_dist * w - viewport_u / 2 - viewport_v / 2;

    cam.pixel00_loc = viewport_upper_left + 0.5 * (cam.pixel_delta_u + cam.pixel_delta_v);

    float defocus_radius = cam.focus_dist * tan(radians(cam.defocus_angle) / 2);
    cam.defocus_disk_u = u * defocus_radius;
    cam.defocus_disk_v = v * defocus_radius;

    return cam;
}

vec3 ray_at(Ray r, float t) {
    return r.origin + t * r.direction;
}


Ray camera_get_ray(Camera cam, ivec2 pixel_coords) {
    vec3 offset = random_square();
    vec3 pixel_sample = cam.pixel00_loc + ((pixel_coords.x + offset.x) * cam.pixel_delta_u) + ((pixel_coords.y + offset.y) * cam.pixel_delta_v);

    vec3 rand = random_unit_disk();
    vec3 defocus_disk_sample = cam.origin + cam.defocus_disk_u * rand.x + cam.defocus_disk_v * rand.y;

    vec3 ray_origin = (cam.defocus_angle <= 0) ? cam.origin : defocus_disk_sample;
    vec3 ray_direction = normalize(pixel_sample - ray_origin);

    return Ray(ray_origin, ray_direction);
}

bool hit_bounding_box(vec3 aabb_min, vec3 aabb_max, Ray ray) {
    vec3 invD = 1.0 / ray.direction;
    vec3 t0 = (aabb_min - ray.origin) * invD;
    vec3 t1 = (aabb_max - ray.origin) * invD;

    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);

    float t_enter = max(max(tmin.x, tmin.y), tmin.z);
    float t_exit = min(min(tmax.x, tmax.y), tmax.z);

    return t_enter <= t_exit;
}


// implements the Möller–Trumbore intersection algorithm
bool hit_triangle(vec3 v0, vec3 v1, vec3 v2, Ray ray, float ray_tmin, float ray_tmax, int material_id, inout HitRecord rec) {
    ray.direction = normalize(ray.direction);

    vec3 bounding_box_min = min(min(v0, v1), v2);
    vec3 bounding_box_max = max(max(v0, v1), v2);

    if (!hit_bounding_box(bounding_box_min, bounding_box_max, ray)) {
        return false;
    }

    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 ray_cross_e2 = cross(ray.direction, edge2);
    float det = dot(edge1, ray_cross_e2);

    // ray and triangle are parallel, or triangle is backfacing
    if (det < 0.000001) {
        return false;
    }

    float inv_det = 1.0 / det;
    vec3 ray_to_v0 = ray.origin - v0;
    float u = dot(ray_to_v0, ray_cross_e2) * inv_det;

    if (u < 0 || u > 1) {
        return false;
    }

    vec3 s_cross_e1 = cross(ray_to_v0, edge1);
    float v = dot(ray.direction, s_cross_e1) * inv_det;

    if (v < 0 || u + v > 1) {
        return false;
    }

    float t = inv_det * dot(edge2, s_cross_e1);

    if (t < ray_tmin || t > ray_tmax) {
        return false;
    }

    rec.t = t;
    rec.p = ray_at(ray, t);
    rec.material_id = material_id;
    rec.normal = normalize(cross(edge1, edge2));

    return true;
}

bool hit_object(int object_index, Ray ray, float ray_tmin, float ray_tmax, inout HitRecord rec) {
    HitRecord closest_rec;
    bool hit_anything = false;
    float closest_so_far = ray_tmax;

    for (int i = 0; i < objects[object_index].indices_count; i++) {
        ivec3 indices = objects[object_index].indices[i];
        vec3 v0 = objects[object_index].triangles[indices.x];
        vec3 v1 = objects[object_index].triangles[indices.y];
        vec3 v2 = objects[object_index].triangles[indices.z];

        if (hit_triangle(v0, v1, v2, ray, ray_tmin, closest_so_far, objects[object_index].material_id, closest_rec)) {
            hit_anything = true;
            closest_so_far = closest_rec.t;
            rec = closest_rec;
        }
    }

    return hit_anything;
}

bool hit_world(Ray r, float t_min, float t_max, inout HitRecord rec) {
    HitRecord temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;

    for (int i = 0; i < num_objects; i++) {
        if (hit_object(i, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }

    return hit_anything;
}


bool material_scatter(int material_id, Ray r_in, HitRecord rec, inout Ray scattered) {
    Material material = materials[material_id];
    if (material.type == 0) {
        scattered.origin = rec.p;
        scattered.direction = rec.normal + random_unit_vec();

        return true;
    } else if (material.type == 1) {
        vec3 reflected = normalize(reflect(r_in.direction, rec.normal));
        reflected += material.fuzz * random_unit_vec();

        scattered.origin = rec.p;
        scattered.direction = reflected;

        return dot(scattered.direction, rec.normal) > 0;
    }

    return false;
}


vec3 ray_color(Ray r) {
    vec3 color = vec3(1); // Tracks cumulative attenuation
    vec3 incomingLight = vec3(0); // Tracks accumulated emitted and reflected light

    for (int i = 0; i < 20; i++) {
        HitRecord rec;
        if (hit_world(r, 0.001, 1000.0, rec)) {
            Material material = materials[rec.material_id];
            vec3 emittedLight = material.emissionColor * material.emissionStrength;

            // Add emitted light scaled by accumulated attenuation
            incomingLight += emittedLight * color;

            Ray scattered;
            if (material_scatter(rec.material_id, r, rec, scattered)) {
                // Update ray and cumulative color
                r = scattered;
                color *= clamp(material.albedo, vec3(0), vec3(1));
            } else {
                // Stop bouncing if the material does not scatter
                break;
            }
        } else {
            // If the ray misses, add the background contribution
//            vec3 unit_direction = normalize(r.direction);
//            float t = 0.5 * (unit_direction.y + 1.0);
//            vec3 background = mix(vec3(1), vec3(0.5, 0.7, 1), t); // Example gradient background
            vec3 background = vec3(0);
            incomingLight += color * background;
            break;
        }
    }

    return incomingLight;
}



vec3 render(Camera cam, ivec2 pixel_coords) {
    Ray r = camera_get_ray(cam, pixel_coords);
    return ray_color(r);
}

void main() {
    ivec2 dimensions = imageSize(screen);
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    pixel_coords = ivec2(pixel_coords.x, dimensions.y - pixel_coords.y);

    Camera cam = camera_init();
    vec3 newPixel = render(cam, ivec2(gl_GlobalInvocationID.xy));

    vec3 oldPixel = imageLoad(screen, pixel_coords).rgb;
    vec3 pixel = (oldPixel * float(frame_counter) + newPixel) / float(frame_counter + 1);

    imageStore(screen, pixel_coords, vec4(pixel, 1));
}